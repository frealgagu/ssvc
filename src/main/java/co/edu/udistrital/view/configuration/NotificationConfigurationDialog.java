package co.edu.udistrital.view.configuration;

import co.edu.udistrital.service.ApplicationServices;
import co.edu.udistrital.service.ConfigurationService;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.*;

public class NotificationConfigurationDialog extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;

	@AutoGenerated
	private NativeButton btnCancel;

	@AutoGenerated
	private NativeButton btnOk;

	@AutoGenerated
	private TextField txtSMSToSendAlarm;

	@AutoGenerated
	private TextField txtSMSToSendAdvice;

	@AutoGenerated
	private TextField txtEmailToSendAlarm;

	@AutoGenerated
	private TextField txtEmailToSendAdvice;

	@AutoGenerated
	private TextField txtTimeBeforeReplayAlarm;

	@AutoGenerated
	private TextField txtTimeBeforeReplayAdvice;

	@AutoGenerated
	private TextField txtTimeBeforeSendAlarm;

	@AutoGenerated
	private TextField txtTimeBeforeSendAdvice;

	@AutoGenerated
	private TextField txtTemperatureThresholdAlarm;

	@AutoGenerated
	private TextField txtTemperatureThresholdAdvice;

	@AutoGenerated
	private TextField txtPressureThresholdAlarm;

	@AutoGenerated
	private Label lblAlarm;

	@AutoGenerated
	private TextField txtPressureThresholdAdvice;

	@AutoGenerated
	private Label lblAdvice;

	@AutoGenerated
	private Label lblTitle;

	@AutoGenerated
	private Label lblSMSToSend;

	@AutoGenerated
	private Label lblEmailToSend;

	@AutoGenerated
	private Label lblTimeBeforeReplay;

	@AutoGenerated
	private Label lblTimeBeforeSend;

	@AutoGenerated
	private Label lblTemperatureThreshold;

	@AutoGenerated
	private Label lblPressureThreshold;

	private static final long serialVersionUID = -4830893180862135404L;	

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public NotificationConfigurationDialog() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
        initialize();
	}

    private void initialize() {
        btnOk.addListener(new Button.ClickListener() {

            private static final long serialVersionUID = -8577869814107324983L;

            @Override
            public void buttonClick(Button.ClickEvent event) {
                ok();
            }
        });
        btnCancel.addListener(new Button.ClickListener() {

            private static final long serialVersionUID = -4972802977202955811L;

            @Override
            public void buttonClick(Button.ClickEvent event) {
                cancel();
            }
        });

        ConfigurationService configurationService = ApplicationServices.getConfigurationService();
        txtPressureThresholdAdvice.setValue(configurationService.getPressureAdviceThreshold());
        txtPressureThresholdAlarm.setValue(configurationService.getPressureAlarmThreshold());
        txtTemperatureThresholdAdvice.setValue(configurationService.getTemperatureAdviceThreshold());
        txtTemperatureThresholdAlarm.setValue(configurationService.getTemperatureAlarmThreshold());
        txtTimeBeforeSendAdvice.setValue(configurationService.getAdviceTimeBeforeSending());
        txtTimeBeforeSendAlarm.setValue(configurationService.getAlarmTimeBeforeSending());
        txtTimeBeforeReplayAdvice.setValue(configurationService.getAdviceTimeBeforeReply());
        txtTimeBeforeReplayAlarm.setValue(configurationService.getAlarmTimeBeforeReply());
        txtEmailToSendAdvice.setValue(configurationService.getEmailOnAdvice());
        txtEmailToSendAlarm.setValue(configurationService.getEmailOnAlarm());
        txtSMSToSendAdvice.setValue(configurationService.getSmsOnAdvice());
        txtSMSToSendAlarm.setValue(configurationService.getSmsOnAlarm());
    }

    private void ok() {
        ConfigurationService configurationService = ApplicationServices.getConfigurationService();
        if(txtPressureThresholdAdvice.getValue() instanceof Integer) {
            configurationService.setPressureAdviceThreshold((Integer)txtPressureThresholdAdvice.getValue());
        } else {
            try {
                configurationService.setPressureAdviceThreshold(Integer.parseInt(String.valueOf(txtPressureThresholdAdvice.getValue())));
            } catch(NumberFormatException ignore) {
                configurationService.setPressureAdviceThreshold(0);
            }
        }
        if(txtPressureThresholdAlarm.getValue() instanceof Integer) {
            configurationService.setPressureAlarmThreshold((Integer)txtPressureThresholdAlarm.getValue());
        } else {
            try {
                configurationService.setPressureAlarmThreshold(Integer.parseInt(String.valueOf(txtPressureThresholdAlarm.getValue())));
            } catch(NumberFormatException ignore) {
                configurationService.setPressureAlarmThreshold(0);
            }
        }
        if(txtTemperatureThresholdAdvice.getValue() instanceof Integer) {
            configurationService.setTemperatureAdviceThreshold((Integer)txtTemperatureThresholdAdvice.getValue());
        } else {
            try {
                configurationService.setTemperatureAdviceThreshold(Integer.parseInt(String.valueOf(txtTemperatureThresholdAdvice.getValue())));
            } catch(NumberFormatException ignore) {
                configurationService.setTemperatureAdviceThreshold(0);
            }
        }
        if(txtTemperatureThresholdAlarm.getValue() instanceof Integer) {
            configurationService.setTemperatureAlarmThreshold((Integer)txtTemperatureThresholdAlarm.getValue());
        } else {
            try {
                configurationService.setTemperatureAlarmThreshold(Integer.parseInt(String.valueOf(txtTemperatureThresholdAlarm.getValue())));
            } catch(NumberFormatException ignore) {
                configurationService.setTemperatureAlarmThreshold(0);
            }
        }
        if(txtTimeBeforeSendAdvice.getValue() instanceof Integer) {
            configurationService.setAdviceTimeBeforeSending((Integer)txtTimeBeforeSendAdvice.getValue());
        } else {
            try {
                configurationService.setAdviceTimeBeforeSending(Integer.parseInt(String.valueOf(txtTimeBeforeSendAdvice.getValue())));
            } catch(NumberFormatException ignore) {
                configurationService.setAdviceTimeBeforeSending(0);
            }
        }
        if(txtTimeBeforeSendAlarm.getValue() instanceof Integer) {
            configurationService.setAlarmTimeBeforeSending((Integer)txtTimeBeforeSendAlarm.getValue());
        } else {
            try {
                configurationService.setAlarmTimeBeforeSending(Integer.parseInt(String.valueOf(txtTimeBeforeSendAlarm.getValue())));
            } catch(NumberFormatException ignore) {
                configurationService.setAlarmTimeBeforeSending(0);
            }
        }
        if(txtTimeBeforeReplayAdvice.getValue() instanceof Integer) {
            configurationService.setAdviceTimeBeforeReply((Integer)txtTimeBeforeReplayAdvice.getValue());
        } else {
            try {
                configurationService.setAdviceTimeBeforeReply(Integer.parseInt(String.valueOf(txtTimeBeforeReplayAdvice.getValue())));
            } catch(NumberFormatException ignore) {
                configurationService.setAdviceTimeBeforeReply(0);
            }
        }
        if(txtTimeBeforeReplayAlarm.getValue() instanceof Integer) {
            configurationService.setAlarmTimeBeforeReply((Integer)txtTimeBeforeReplayAlarm.getValue());
        } else {
            try {
                configurationService.setAlarmTimeBeforeReply(Integer.parseInt(String.valueOf(txtTimeBeforeReplayAlarm.getValue())));
            } catch(NumberFormatException ignore) {
                configurationService.setAlarmTimeBeforeReply(0);
            }
        }
        if(txtEmailToSendAdvice.getValue() != null) {
            configurationService.setEmailOnAdvice(String.valueOf(txtEmailToSendAdvice.getValue()));
        } else {
            configurationService.setEmailOnAdvice("");
        }
        if(txtEmailToSendAlarm.getValue() != null) {
            configurationService.setEmailOnAlarm(String.valueOf(txtEmailToSendAlarm.getValue()));
        } else {
            configurationService.setEmailOnAlarm("");
        }
        if(txtSMSToSendAdvice.getValue() != null) {
            configurationService.setSmsOnAdvice(String.valueOf(txtSMSToSendAdvice.getValue()));
        } else {
            configurationService.setSmsOnAdvice("");
        }
        if(txtSMSToSendAlarm.getValue() != null) {
            configurationService.setSmsOnAlarm(String.valueOf(txtSMSToSendAlarm.getValue()));
        } else {
            configurationService.setSmsOnAlarm("");
        }

        if(getWindow() != null && getWindow().getParent() != null) {
            getWindow().getParent().removeWindow(getWindow());
        }
    }

    private void cancel() {
        if(getWindow() != null && getWindow().getParent() != null) {
            getWindow().getParent().removeWindow(getWindow());
        }
    }

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("540px");
		mainLayout.setHeight("360px");
		
		// top-level component properties
		setWidth("540px");
		setHeight("360px");

        // lblTitle
        lblTitle = new Label();
        lblTitle.setImmediate(false);
        lblTitle.setWidth("100.0%");
        lblTitle.setHeight("20px");
        lblTitle.setValue("<font size=\"4\"><center><b>Configuraci\u00F3n de Notificaciones</b></center>");
        lblTitle.setContentMode(3);
        mainLayout.addComponent(lblTitle, "top:20.0px;right:20.0px;left:20.0px;");

        // lblAdvice
        lblAdvice = new Label();
        lblAdvice.setImmediate(false);
        lblAdvice.setWidth("160px");
        lblAdvice.setHeight("25px");
        lblAdvice.setValue("<center>Aviso</center>");
        lblAdvice.setContentMode(3);
        mainLayout.addComponent(lblAdvice, "top:55.0px;left:180.0px;");

        // lblAlarm
        lblAlarm = new Label();
        lblAlarm.setImmediate(false);
        lblAlarm.setWidth("160px");
        lblAlarm.setHeight("25px");
        lblAlarm.setValue("<center>Alarma</center>");
        lblAlarm.setContentMode(3);
        mainLayout.addComponent(lblAlarm, "top:55.0px;left:360.0px;");

		// lblPressureThreshold
		lblPressureThreshold = new Label();
		lblPressureThreshold.setImmediate(false);
		lblPressureThreshold.setWidth("160px");
		lblPressureThreshold.setHeight("25px");
		lblPressureThreshold.setValue("Umbral de presi\u00F3n:");
		mainLayout.addComponent(lblPressureThreshold, "top:90.0px;left:20.0px;");

        // txtPressureThresholdAdvice
        txtPressureThresholdAdvice = new TextField();
        txtPressureThresholdAdvice.setImmediate(false);
        txtPressureThresholdAdvice.setWidth("160px");
        txtPressureThresholdAdvice.setHeight("25px");
        mainLayout.addComponent(txtPressureThresholdAdvice, "top:90.0px;left:180.0px;");

        // txtPressureThresholdAlarm
        txtPressureThresholdAlarm = new TextField();
        txtPressureThresholdAlarm.setImmediate(false);
        txtPressureThresholdAlarm.setWidth("160px");
        txtPressureThresholdAlarm.setHeight("25px");
        mainLayout.addComponent(txtPressureThresholdAlarm, "top:90.0px;left:360.0px;");
		
		// lblTemperatureThreshold
		lblTemperatureThreshold = new Label();
		lblTemperatureThreshold.setImmediate(false);
		lblTemperatureThreshold.setWidth("160px");
		lblTemperatureThreshold.setHeight("25px");
		lblTemperatureThreshold.setValue("Umbral de temperatura:");
		mainLayout.addComponent(lblTemperatureThreshold, "top:120.0px;left:20.0px;");

        // txtTemperatureThresholdAdvice
        txtTemperatureThresholdAdvice = new TextField();
        txtTemperatureThresholdAdvice.setImmediate(false);
        txtTemperatureThresholdAdvice.setWidth("160px");
        txtTemperatureThresholdAdvice.setHeight("25px");
        mainLayout.addComponent(txtTemperatureThresholdAdvice, "top:120.0px;left:180.0px;");

        // txtTemperatureThresholdAlarm
        txtTemperatureThresholdAlarm = new TextField();
        txtTemperatureThresholdAlarm.setImmediate(false);
        txtTemperatureThresholdAlarm.setWidth("160px");
        txtTemperatureThresholdAlarm.setHeight("25px");
        mainLayout.addComponent(txtTemperatureThresholdAlarm, "top:120.0px;left:360.0px;");
		
		// lblTimeBeforeSend
		lblTimeBeforeSend = new Label();
		lblTimeBeforeSend.setImmediate(false);
		lblTimeBeforeSend.setWidth("160px");
		lblTimeBeforeSend.setHeight("25px");
		lblTimeBeforeSend.setValue("Tiempo antes de enviar:");
		mainLayout.addComponent(lblTimeBeforeSend, "top:160.0px;left:20.0px;");

        // txtTimeBeforeSendAdvice
        txtTimeBeforeSendAdvice = new TextField();
        txtTimeBeforeSendAdvice.setImmediate(false);
        txtTimeBeforeSendAdvice.setWidth("160px");
        txtTimeBeforeSendAdvice.setHeight("25px");
        mainLayout.addComponent(txtTimeBeforeSendAdvice, "top:160.0px;left:180.0px;");

        // txtTimeBeforeSendAlarm
        txtTimeBeforeSendAlarm = new TextField();
        txtTimeBeforeSendAlarm.setImmediate(false);
        txtTimeBeforeSendAlarm.setWidth("160px");
        txtTimeBeforeSendAlarm.setHeight("25px");
        mainLayout.addComponent(txtTimeBeforeSendAlarm, "top:160.0px;left:360.0px;");
		
		// lblTimeBeforeReplay
		lblTimeBeforeReplay = new Label();
		lblTimeBeforeReplay.setImmediate(false);
		lblTimeBeforeReplay.setWidth("160px");
		lblTimeBeforeReplay.setHeight("25px");
		lblTimeBeforeReplay.setValue("Tiempo antes de re-enviar:");
		mainLayout.addComponent(lblTimeBeforeReplay, "top:190.0px;left:20.0px;");

        // txtTimeBeforeReplayAdvice
        txtTimeBeforeReplayAdvice = new TextField();
        txtTimeBeforeReplayAdvice.setImmediate(false);
        txtTimeBeforeReplayAdvice.setWidth("160px");
        txtTimeBeforeReplayAdvice.setHeight("25px");
        mainLayout.addComponent(txtTimeBeforeReplayAdvice, "top:190.0px;left:180.0px;");

        // txtTimeBeforeReplayAlarm
        txtTimeBeforeReplayAlarm = new TextField();
        txtTimeBeforeReplayAlarm.setImmediate(false);
        txtTimeBeforeReplayAlarm.setWidth("160px");
        txtTimeBeforeReplayAlarm.setHeight("25px");
        mainLayout.addComponent(txtTimeBeforeReplayAlarm, "top:190.0px;left:360.0px;");
		
		// lblEmailToSend
		lblEmailToSend = new Label();
		lblEmailToSend.setImmediate(false);
		lblEmailToSend.setWidth("160px");
		lblEmailToSend.setHeight("25px");
		lblEmailToSend.setValue("E-mail de notificaci\u00F3n:");
		mainLayout.addComponent(lblEmailToSend, "top:230.0px;left:20.0px;");

        // txtEmailToSendAdvice
        txtEmailToSendAdvice = new TextField();
        txtEmailToSendAdvice.setImmediate(false);
        txtEmailToSendAdvice.setWidth("160px");
        txtEmailToSendAdvice.setHeight("25px");
        mainLayout.addComponent(txtEmailToSendAdvice, "top:230.0px;left:180.0px;");

        // txtEmailToSendAlarm
        txtEmailToSendAlarm = new TextField();
        txtEmailToSendAlarm.setImmediate(false);
        txtEmailToSendAlarm.setWidth("160px");
        txtEmailToSendAlarm.setHeight("25px");
        mainLayout.addComponent(txtEmailToSendAlarm, "top:230.0px;left:360.0px;");
		
		// lblSMSToSend
		lblSMSToSend = new Label();
		lblSMSToSend.setImmediate(false);
		lblSMSToSend.setWidth("160px");
		lblSMSToSend.setHeight("25px");
		lblSMSToSend.setValue("SMS de notificaci\u00F3n:");
		mainLayout.addComponent(lblSMSToSend, "top:260.0px;left:20.0px;");
		
		// txtSMSToSendAdvice
		txtSMSToSendAdvice = new TextField();
		txtSMSToSendAdvice.setImmediate(false);
		txtSMSToSendAdvice.setWidth("160px");
		txtSMSToSendAdvice.setHeight("25px");
		mainLayout.addComponent(txtSMSToSendAdvice, "top:260.0px;left:180.0px;");
		
		// txtSMSToSendAlarm
		txtSMSToSendAlarm = new TextField();
		txtSMSToSendAlarm.setImmediate(false);
		txtSMSToSendAlarm.setWidth("160px");
		txtSMSToSendAlarm.setHeight("25px");
		mainLayout.addComponent(txtSMSToSendAlarm, "top:260.0px;left:360.0px;");
		
		// btnOk
		btnOk = new NativeButton();
		btnOk.setCaption("Aceptar");
		btnOk.setImmediate(false);
		btnOk.setWidth("120px");
		btnOk.setHeight("38px");
		mainLayout.addComponent(btnOk, "top:300.0px;left:130.0px;");
		
		// btnCancel
		btnCancel = new NativeButton();
		btnCancel.setCaption("Cancelar");
		btnCancel.setImmediate(true);
		btnCancel.setWidth("120px");
		btnCancel.setHeight("38px");
		mainLayout.addComponent(btnCancel, "top:300.0px;left:290.0px;");
		
		return mainLayout;
	}

}
