package co.edu.udistrital.view.status;

import co.edu.udistrital.exception.IntervalNotFoundException;
import co.edu.udistrital.service.ApplicationServices;
import co.edu.udistrital.service.ConfigurationService;
import co.edu.udistrital.service.MeasureService;

import co.edu.udistrital.view.InitApplication;
import com.github.wolfie.refresher.Refresher;
import com.github.wolfie.refresher.Refresher.RefreshListener;
import com.vaadin.addon.charts.Chart;
import com.vaadin.addon.charts.model.Background;
import com.vaadin.addon.charts.model.ChartType;
import com.vaadin.addon.charts.model.Configuration;
import com.vaadin.addon.charts.model.ListSeries;
import com.vaadin.addon.charts.model.PlotBand;
import com.vaadin.addon.charts.model.PlotOptionsGauge;
import com.vaadin.addon.charts.model.TickPosition;
import com.vaadin.addon.charts.model.Title;
import com.vaadin.addon.charts.model.YAxis;
import com.vaadin.addon.charts.model.style.GradientColor;
import com.vaadin.addon.charts.model.style.SolidColor;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.Window.Notification;

public class CurrentStatusWindow extends CustomComponent implements RefreshListener {

	@AutoGenerated
	private AbsoluteLayout mainLayout;

	@AutoGenerated
	private NativeButton btnMemoryMap;

	@AutoGenerated
	private NativeButton btnLastRecords;

	@AutoGenerated
	private NativeButton btnConfiguration;

	@AutoGenerated
	private NativeButton btnControl;

	@AutoGenerated
	private Refresher refresher;

	@AutoGenerated
	private Chart chartTemperatureGauge;

	@AutoGenerated
	private Chart chartPressionGauge;

	private static final long serialVersionUID = 4931489055213623658L;
	
	private final InitApplication initApplication;
	
	private ListSeries pressionListSeries;
	private ListSeries temperatureListSeries;
	
	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public CurrentStatusWindow(InitApplication initApplication) {
		this.initApplication = initApplication;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		initialize();
	}
	
	private void initialize() {
		btnControl.addListener(new Button.ClickListener() {

			private static final long serialVersionUID = -4021426038318305486L;

			@Override
			public void buttonClick(ClickEvent event) {
				initApplication.showControlWindow();
			}
		});
		btnConfiguration.addListener(new Button.ClickListener() {

            private static final long serialVersionUID = 1763762022344089588L;

			@Override
			public void buttonClick(ClickEvent event) {
				initApplication.showConfigurationWindow();
			}
		});
		btnLastRecords.addListener(new Button.ClickListener() {

            private static final long serialVersionUID = 5694900205721293001L;

			@Override
			public void buttonClick(ClickEvent event) {
				initApplication.showLastRecordsWindow();
			}
		});
		btnMemoryMap.addListener(new Button.ClickListener() {

            private static final long serialVersionUID = 1362297965791130357L;

			@Override
			public void buttonClick(ClickEvent event) {
				initApplication.showMemoryMapWindow();
			}
		});

		chartPressionGauge.setConfiguration(createPressionGaugeConfiguration());
		chartTemperatureGauge.setConfiguration(createTemperatureGaugeConfiguration());

		refresher.setRefreshInterval(1000);
		refresher.addListener(this);
	}
	
	@Override
    public void refresh(Refresher source) {
		if(isVisible()) {
			source.attach();
			MeasureService measureService = ApplicationServices.getMeasureService();
			try {
				int pressureRegister = measureService.retrieveLastPressureSecondInterval().getValue();
				pressionListSeries.updatePoint(0, pressureRegister);
				checkPressureAlert(pressureRegister);
				int temperatureRegister = measureService.retrieveLastTemperatureSecondInterval().getValue();
				temperatureListSeries.updatePoint(0, temperatureRegister);
				checkTemperatureAlert(temperatureRegister);
			} catch (Throwable t) {
				t.printStackTrace();
			}
		} else {
			source.detach();
		}
    }
	
	private void checkPressureAlert(int pressureRegister) {
		ConfigurationService configurationService = ApplicationServices.getConfigurationService();
		if(pressureRegister >= configurationService.getPressureAlarmThreshold()) {
			Notification notification = new Notification("La presi\u00F3n ha superado el nivel de alerta");
			notification.setDelayMsec(500);
			notification.setStyleName("tray");
			notification.setPosition(Notification.POSITION_BOTTOM_LEFT);
			getWindow().showNotification(notification);
		} else if(pressureRegister >= configurationService.getPressureAdviceThreshold()) {
			Notification notification = new Notification("La presi\u00F3n ha superado el nivel de advertencia");
			notification.setDelayMsec(500);
			notification.setStyleName("tray");
			notification.setPosition(Notification.POSITION_BOTTOM_LEFT);
			getWindow().showNotification(notification);
		}
	}
	
	private void checkTemperatureAlert(int temperatureRegister) {
		ConfigurationService configurationService = ApplicationServices.getConfigurationService();
		if(temperatureRegister >= configurationService.getTemperatureAlarmThreshold()) {
			Notification notification = new Notification("La temperatura ha superado el nivel de alerta");
			notification.setDelayMsec(500);
			notification.setStyleName("tray");
			notification.setPosition(Notification.POSITION_BOTTOM_RIGHT);
			getWindow().showNotification(notification);
		} else if(temperatureRegister >= configurationService.getTemperatureAdviceThreshold()) {
			Notification notification = new Notification("La temperatura ha superado el nivel de advertencia");
			notification.setDelayMsec(500);
			notification.setStyleName("tray");
			notification.setPosition(Notification.POSITION_BOTTOM_RIGHT);
			getWindow().showNotification(notification);
		}
	}

	private Configuration createPressionGaugeConfiguration() {
		Configuration configuration = new Configuration();
        configuration.getChart().setType(ChartType.GAUGE);
        configuration.setTitle("Presi\u00F3n");

        GradientColor gradient1 = GradientColor.createLinear(0, 0, 0, 1);
        gradient1.addColorStop(0, new SolidColor("#FFF"));
        gradient1.addColorStop(1, new SolidColor("#333"));

        GradientColor gradient2 = GradientColor.createLinear(0, 0, 0, 1);
        gradient2.addColorStop(0, new SolidColor("#333"));
        gradient2.addColorStop(1, new SolidColor("#FFF"));

        Background[] background = new Background[3];
        background[0] = new Background();
        background[0].setBackgroundColor(gradient1);
        background[0].setBorderWidth(0);
        background[0].setOuterRadius("109%");

        background[1] = new Background();
        background[1].setBackgroundColor(gradient2);
        background[1].setBorderWidth(1);
        background[1].setOuterRadius("107%");

        background[2] = new Background();
        background[2].setBackgroundColor(new SolidColor("#DDD"));
        background[2].setBorderWidth(0);
        background[2].setInnerRadius("103%");
        background[2].setOuterRadius("105%");

        configuration.getPane().setStartAngle(-150);
        configuration.getPane().setEndAngle(150);
        configuration.getPane().setBackground(background);
        
        ConfigurationService configurationService = ApplicationServices.getConfigurationService();
        int minValue = 0;
        int adviceValue = configurationService.getPressureAdviceThreshold();
        int alertValue = configurationService.getPressureAlarmThreshold();
        int maxValue = 2 * alertValue - adviceValue;        

        YAxis yAxis = configuration.getyAxis();
        yAxis.setTitle(new Title("lpc"));
        yAxis.setMin(minValue);
        yAxis.setMax(maxValue);
        yAxis.setMinorTickInterval("auto");
        yAxis.setMinorTickWidth(1);
        yAxis.setMinorTickLength(10);
        yAxis.setMinorTickPosition(TickPosition.INSIDE);
        yAxis.setMinorTickColor(new SolidColor("#666"));

        yAxis.setTickPixelInterval(30);
        yAxis.setTickWidth(2);
        yAxis.setTickPosition(TickPosition.INSIDE);
        yAxis.setTickLength(10);
        yAxis.setTickColor(new SolidColor("#666"));

        yAxis.getLabels().setStep(2);
        yAxis.getLabels().setRotationPerpendicular();

        PlotBand[] plotBands = new PlotBand[3];
        plotBands[0] = new PlotBand(minValue, adviceValue, new SolidColor("#55BF3B"));
        plotBands[1] = new PlotBand(adviceValue, alertValue, new SolidColor("#DDDF0D"));
        plotBands[2] = new PlotBand(alertValue, maxValue, new SolidColor("#DF5353"));
        yAxis.setPlotBands(plotBands);

        pressionListSeries = new ListSeries();
        pressionListSeries.setName("Presi\u00F3n");
        pressionListSeries.setData(0);
        PlotOptionsGauge plotOptions = new PlotOptionsGauge();
        plotOptions.getTooltip().setValueSuffix(" lpc");
        pressionListSeries.setPlotOptions(plotOptions);
        configuration.setSeries(pressionListSeries);        
        
        return configuration;
	}
	
	private Configuration createTemperatureGaugeConfiguration() {
		Configuration configuration = new Configuration();
        configuration.getChart().setType(ChartType.GAUGE);
        configuration.setTitle("Temperatura");
        
        GradientColor gradient1 = GradientColor.createLinear(0, 0, 0, 1);
        gradient1.addColorStop(0, new SolidColor("#FFF"));
        gradient1.addColorStop(1, new SolidColor("#333"));

        GradientColor gradient2 = GradientColor.createLinear(0, 0, 0, 1);
        gradient2.addColorStop(0, new SolidColor("#333"));
        gradient2.addColorStop(1, new SolidColor("#FFF"));

        Background[] background = new Background[3];
        background[0] = new Background();
        background[0].setBackgroundColor(gradient1);
        background[0].setBorderWidth(0);
        background[0].setOuterRadius("109%");

        background[1] = new Background();
        background[1].setBackgroundColor(gradient2);
        background[1].setBorderWidth(1);
        background[1].setOuterRadius("107%");

        background[2] = new Background();
        background[2].setBackgroundColor(new SolidColor("#DDD"));
        background[2].setBorderWidth(0);
        background[2].setInnerRadius("103%");
        background[2].setOuterRadius("105%");

        configuration.getPane().setStartAngle(-150);
        configuration.getPane().setEndAngle(150);
        configuration.getPane().setBackground(background);

        ConfigurationService configurationService = ApplicationServices.getConfigurationService();
        int minValue = 0;
        int adviceValue = configurationService.getTemperatureAdviceThreshold();
        int alertValue = configurationService.getTemperatureAlarmThreshold();
        int maxValue = 2 * alertValue - adviceValue;
        
        YAxis yAxis = configuration.getyAxis();
        yAxis.setTitle(new Title("ºC"));
        yAxis.setMin(minValue);
        yAxis.setMax(maxValue);
        yAxis.setMinorTickInterval("auto");
        yAxis.setMinorTickWidth(1);
        yAxis.setMinorTickLength(10);
        yAxis.setMinorTickPosition(TickPosition.INSIDE);
        yAxis.setMinorTickColor(new SolidColor("#666"));

        yAxis.setTickPixelInterval(30);
        yAxis.setTickWidth(2);
        yAxis.setTickPosition(TickPosition.INSIDE);
        yAxis.setTickLength(10);
        yAxis.setTickColor(new SolidColor("#666"));

        yAxis.getLabels().setStep(2);
        yAxis.getLabels().setRotationPerpendicular();

        PlotBand[] plotBands = new PlotBand[3];
        plotBands[0] = new PlotBand(minValue, adviceValue, new SolidColor("#55BF3B"));
        plotBands[1] = new PlotBand(adviceValue, alertValue, new SolidColor("#DDDF0D"));
        plotBands[2] = new PlotBand(alertValue, maxValue, new SolidColor("#DF5353"));
        yAxis.setPlotBands(plotBands);

        temperatureListSeries = new ListSeries();
        temperatureListSeries.setName("Temperatura");
        temperatureListSeries.setData(0);
        PlotOptionsGauge plotOptions = new PlotOptionsGauge();
        plotOptions.getTooltip().setValueSuffix("ºC");
        temperatureListSeries.setPlotOptions(plotOptions);
        configuration.setSeries(temperatureListSeries);
        
        return configuration;
	}
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("580px");
		mainLayout.setHeight("400px");
		
		// top-level component properties
		setWidth("580px");
		setHeight("400px");
		
		// chartPressionGauge
		chartPressionGauge = new Chart();
		chartPressionGauge.setImmediate(false);
		chartPressionGauge.setWidth("260px");
		chartPressionGauge.setHeight("260px");
		mainLayout.addComponent(chartPressionGauge, "top:20.0px;left:20.0px;");
		
		// chartTemperatureGauge
		chartTemperatureGauge = new Chart();
		chartTemperatureGauge.setImmediate(false);
		chartTemperatureGauge.setWidth("260px");
		chartTemperatureGauge.setHeight("260px");
		mainLayout.addComponent(chartTemperatureGauge,
				"top:20.0px;right:20.0px;");

		// btnControl
		btnControl = new NativeButton();
		btnControl.setCaption("Control PLC");
		btnControl
				.setIcon(new ThemeResource("img/plc-settings-Icon-72x72.png"));
		btnControl.setImmediate(true);
		btnControl.setWidth("86px");
		btnControl.setHeight("86px");
		mainLayout.addComponent(btnControl, "top:300.0px;left:25.0px;");
		
		// btnConfiguration
		btnConfiguration = new NativeButton();
		btnConfiguration.setCaption("Configuraci\u00F3n");
		btnConfiguration.setIcon(new ThemeResource(
				"img/settings-icon-72x72.png"));
		btnConfiguration.setImmediate(true);
		btnConfiguration.setWidth("86px");
		btnConfiguration.setHeight("86px");
		mainLayout.addComponent(btnConfiguration, "top:300.0px;left:136.0px;");
		
		// btnLastRecords
		btnLastRecords = new NativeButton();
		btnLastRecords.setCaption("\u00DAltimos Registros");
		btnLastRecords.setIcon(new ThemeResource(
				"img/last-records-icon-72x72.png"));
		btnLastRecords.setImmediate(true);
		btnLastRecords.setWidth("86px");
		btnLastRecords.setHeight("86px");
		mainLayout.addComponent(btnLastRecords, "top:300.0px;left:358.0px;");
		
		// btnMemoryMap
		btnMemoryMap = new NativeButton();
		btnMemoryMap.setCaption("Mapa de memoria");
		btnMemoryMap
				.setIcon(new ThemeResource("img/memory-map-icon-72x72.png"));
		btnMemoryMap.setImmediate(true);
		btnMemoryMap.setWidth("86px");
		btnMemoryMap.setHeight("86px");
		mainLayout.addComponent(btnMemoryMap, "top:300.0px;left:469.0px;");

        // refresher
        refresher = new Refresher();
        refresher.setImmediate(false);
        refresher.setWidth("-1px");
        refresher.setHeight("-1px");
        mainLayout.addComponent(refresher, "top:0.0px;left:0.0px;");
		
		return mainLayout;
	}
}
