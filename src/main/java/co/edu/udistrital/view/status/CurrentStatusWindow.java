package co.edu.udistrital.view.status;

import co.edu.udistrital.exception.IntervalNotFoundException;
import co.edu.udistrital.exception.PLCCommunicationException;
import co.edu.udistrital.service.ApplicationServices;
import co.edu.udistrital.service.ConfigurationService;
import co.edu.udistrital.service.MeasureService;

import co.edu.udistrital.service.PLCService;
import co.edu.udistrital.view.InitApplication;
import com.github.wolfie.refresher.Refresher;
import com.github.wolfie.refresher.Refresher.RefreshListener;
import com.spinn3r.log5j.Logger;
import com.vaadin.addon.charts.Chart;
import com.vaadin.addon.charts.model.*;
import com.vaadin.addon.charts.model.style.GradientColor;
import com.vaadin.addon.charts.model.style.SolidColor;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.*;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;

import java.math.BigDecimal;

public class CurrentStatusWindow extends CustomComponent implements RefreshListener {

    protected static final Logger logger = Logger.getLogger();

	@AutoGenerated
	private AbsoluteLayout mainLayout;

	@AutoGenerated
	private NativeButton btnMemoryMap;

	@AutoGenerated
	private NativeButton btnLastRecords;

	@AutoGenerated
	private NativeButton btnConfiguration;

	@AutoGenerated
	private NativeButton btnControl;

	@AutoGenerated
	private Refresher refresher;

    @AutoGenerated
    private Chart chartPressureGauge;

	@AutoGenerated
	private Chart chartTemperatureGauge;

	private static final long serialVersionUID = 4931489055213623658L;
	
	private final InitApplication initApplication;
	
	private ListSeries temperatureListSeries;
    private ListSeries pressureListSeries;
	
	private boolean printingError;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public CurrentStatusWindow(InitApplication initApplication) {
		this.initApplication = initApplication;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		initialize();
	}
	
	private void initialize() {
		btnControl.addListener(new Button.ClickListener() {

			private static final long serialVersionUID = -4021426038318305486L;

			@Override
			public void buttonClick(ClickEvent event) {
				initApplication.showControlWindow();
			}
		});
		btnConfiguration.addListener(new Button.ClickListener() {

            private static final long serialVersionUID = 1763762022344089588L;

			@Override
			public void buttonClick(ClickEvent event) {
				initApplication.showConfigurationWindow();
			}
		});
		btnLastRecords.addListener(new Button.ClickListener() {

            private static final long serialVersionUID = 5694900205721293001L;

			@Override
			public void buttonClick(ClickEvent event) {
				initApplication.showLastRecordsWindow();
			}
		});
		btnMemoryMap.addListener(new Button.ClickListener() {

            private static final long serialVersionUID = 1362297965791130357L;

			@Override
			public void buttonClick(ClickEvent event) {
				initApplication.showMemoryMapWindow();
			}
		});

		chartTemperatureGauge.setConfiguration(createTemperatureGaugeConfiguration());
        chartPressureGauge.setConfiguration(createPressureGaugeConfiguration());

        update();

		refresher.setRefreshInterval(1000);
		refresher.addListener(this);
	}
	
	@Override
    public void refresh(Refresher source) {
		if(isVisible()) {
			source.attach();
			update();
		} else {
			source.detach();
		}
    }

    private void update() {
        MeasureService measureService = ApplicationServices.getMeasureService();
        ConfigurationService configurationService = ApplicationServices.getConfigurationService();
        PLCService plcService = ApplicationServices.getPLCService();
        try {
            int temperatureAlarm = plcService.readRegister(configurationService.getTemperatureAlarmRegister(), InitApplication.UNIT_ID);
            BigDecimal minTemperatureValue = BigDecimal.ZERO;
            BigDecimal alertTemperatureValue = BigDecimal.valueOf(temperatureAlarm).divide(BigDecimal.TEN, 1, BigDecimal.ROUND_HALF_UP);
            BigDecimal maxTemperatureValue = alertTemperatureValue.multiply(BigDecimal.valueOf(1.5D));
            YAxis temperatureYAxis = chartTemperatureGauge.getConfiguration().getyAxis();
            if(maxTemperatureValue.compareTo((BigDecimal)temperatureYAxis.getMax()) != 0) {
                temperatureYAxis.setMax(maxTemperatureValue);
                PlotBand[] plotBands = new PlotBand[2];
                plotBands[0] = new PlotBand(minTemperatureValue, alertTemperatureValue, new SolidColor("#55BF3B"));
                plotBands[1] = new PlotBand(alertTemperatureValue, maxTemperatureValue, new SolidColor("#DF5353"));
                temperatureYAxis.setPlotBands(plotBands);
                chartTemperatureGauge.requestRepaint();
            }
            BigDecimal temperatureRegister = measureService.retrieveLastTemperatureSecondInterval().getValue();
            temperatureListSeries.updatePoint(0, temperatureRegister);

            int pressureAlarm = plcService.readRegister(configurationService.getPressureAlarmRegister(), InitApplication.UNIT_ID);
            BigDecimal minPressureValue = BigDecimal.ZERO;
            BigDecimal alertPressureValue = BigDecimal.valueOf(pressureAlarm).divide(BigDecimal.TEN, 1, BigDecimal.ROUND_HALF_UP);
            BigDecimal maxPressureValue = alertPressureValue.multiply(BigDecimal.valueOf(1.5D));
            YAxis pressureYAxis = chartPressureGauge.getConfiguration().getyAxis();
            if(maxPressureValue.compareTo((BigDecimal)pressureYAxis.getMax()) != 0) {
                pressureYAxis.setMax(maxPressureValue);
                PlotBand[] plotBands = new PlotBand[2];
                plotBands[0] = new PlotBand(minPressureValue, alertPressureValue, new SolidColor("#55BF3B"));
                plotBands[1] = new PlotBand(alertPressureValue, maxPressureValue, new SolidColor("#DF5353"));
                pressureYAxis.setPlotBands(plotBands);
                chartPressureGauge.requestRepaint();
            }
            BigDecimal pressureRegisterValue = measureService.retrieveLastPressureSecondInterval().getValue();
            pressureListSeries.updatePoint(0, pressureRegisterValue);

            printingError = false;
        } catch (PLCCommunicationException | IntervalNotFoundException ex) {
            if(!printingError) {
                logger.error(ex);
            }
            printingError = true;
        }
    }

	private Configuration createTemperatureGaugeConfiguration() {
		Configuration configuration = new Configuration();
        configuration.getChart().setType(ChartType.GAUGE);
        configuration.setTitle("Temperatura");

        GradientColor gradient1 = GradientColor.createLinear(0, 0, 0, 1);
        gradient1.addColorStop(0, new SolidColor("#FFF"));
        gradient1.addColorStop(1, new SolidColor("#333"));

        GradientColor gradient2 = GradientColor.createLinear(0, 0, 0, 1);
        gradient2.addColorStop(0, new SolidColor("#FFF"));
        gradient2.addColorStop(1, new SolidColor("#999"));

        Background[] background = new Background[3];
        background[0] = new Background();
        background[0].setBackgroundColor(gradient1);
        background[0].setBorderWidth(0);
        background[0].setOuterRadius("109%");

        background[1] = new Background();
        background[1].setBackgroundColor(gradient2);
        background[1].setBorderWidth(0);
        background[1].setOuterRadius("107%");

        background[2] = new Background();
        background[2].setBackgroundColor(new SolidColor("#777"));
        background[2].setBorderWidth(0);
        background[2].setInnerRadius("103%");
        background[2].setOuterRadius("105%");

        configuration.getPane().setStartAngle(-150);
        configuration.getPane().setEndAngle(150);
        configuration.getPane().setBackground(background);

        YAxis yAxis = configuration.getyAxis();
        yAxis.setTitle(new Title("ºC"));
        yAxis.setMin(BigDecimal.ZERO);
        yAxis.setMax(BigDecimal.TEN);
        yAxis.setMinorTickInterval("auto");
        yAxis.setMinorTickWidth(1);
        yAxis.setMinorTickLength(10);
        yAxis.setMinorTickPosition(TickPosition.INSIDE);
        yAxis.setMinorTickColor(new SolidColor("#555"));

        yAxis.setTickPixelInterval(30);
        yAxis.setTickWidth(2);
        yAxis.setTickPosition(TickPosition.INSIDE);
        yAxis.setTickLength(10);
        yAxis.setTickColor(new SolidColor("#222"));

        yAxis.getLabels().setStep(2);
        yAxis.getLabels().setRotationPerpendicular();

        temperatureListSeries = new ListSeries();
        temperatureListSeries.setName("Temperatura");
        temperatureListSeries.setData(0);
        PlotOptionsGauge plotOptions = new PlotOptionsGauge();
        plotOptions.getTooltip().setValueSuffix("ºC");
        plotOptions.setColor(new SolidColor("#000"));
        temperatureListSeries.setPlotOptions(plotOptions);
        configuration.setSeries(temperatureListSeries);

        return configuration;
	}

    private Configuration createPressureGaugeConfiguration() {
        Configuration configuration = new Configuration();
        configuration.getChart().setType(ChartType.GAUGE);
        configuration.setTitle("Presi\u00F3n");

        GradientColor gradient1 = GradientColor.createLinear(0, 0, 0, 1);
        gradient1.addColorStop(0, new SolidColor("#FFF"));
        gradient1.addColorStop(1, new SolidColor("#333"));

        GradientColor gradient2 = GradientColor.createLinear(0, 0, 0, 1);
        gradient2.addColorStop(0, new SolidColor("#FFF"));
        gradient2.addColorStop(1, new SolidColor("#999"));

        Background[] background = new Background[3];
        background[0] = new Background();
        background[0].setBackgroundColor(gradient1);
        background[0].setBorderWidth(0);
        background[0].setOuterRadius("109%");

        background[1] = new Background();
        background[1].setBackgroundColor(gradient2);
        background[1].setBorderWidth(0);
        background[1].setOuterRadius("107%");

        background[2] = new Background();
        background[2].setBackgroundColor(new SolidColor("#777"));
        background[2].setBorderWidth(0);
        background[2].setInnerRadius("103%");
        background[2].setOuterRadius("105%");

        configuration.getPane().setStartAngle(-150);
        configuration.getPane().setEndAngle(150);
        configuration.getPane().setBackground(background);

        YAxis yAxis = configuration.getyAxis();
        yAxis.setTitle(new Title("lpc"));
        yAxis.setMin(BigDecimal.ZERO);
        yAxis.setMax(BigDecimal.TEN);
        yAxis.setMinorTickInterval("auto");
        yAxis.setMinorTickWidth(1);
        yAxis.setMinorTickLength(10);
        yAxis.setMinorTickPosition(TickPosition.INSIDE);
        yAxis.setMinorTickColor(new SolidColor("#555"));

        yAxis.setTickPixelInterval(30);
        yAxis.setTickWidth(2);
        yAxis.setTickPosition(TickPosition.INSIDE);
        yAxis.setTickLength(10);
        yAxis.setTickColor(new SolidColor("#222"));

        yAxis.getLabels().setStep(2);
        yAxis.getLabels().setRotationPerpendicular();

        pressureListSeries = new ListSeries();
        pressureListSeries.setName("Presi\u00F3n");
        pressureListSeries.setData(0);
        PlotOptionsGauge plotOptions = new PlotOptionsGauge();
        plotOptions.getTooltip().setValueSuffix(" lpc");
        plotOptions.setColor(new SolidColor("#000"));
        pressureListSeries.setPlotOptions(plotOptions);
        configuration.setSeries(pressureListSeries);

        return configuration;
    }
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("580px");
		mainLayout.setHeight("400px");
		
		// top-level component properties
		setWidth("580px");
		setHeight("400px");
		
		// chartTemperatureGauge
		chartTemperatureGauge = new Chart();
		chartTemperatureGauge.setImmediate(false);
		chartTemperatureGauge.setWidth("260px");
		chartTemperatureGauge.setHeight("260px");
		mainLayout.addComponent(chartTemperatureGauge, "top:20.0px;left:20.0px;");

        // chartPressureGauge
        chartPressureGauge = new Chart();
        chartPressureGauge.setImmediate(false);
        chartPressureGauge.setWidth("260px");
        chartPressureGauge.setHeight("260px");
        mainLayout.addComponent(chartPressureGauge, "top:20.0px;right:20.0px;");

		// btnControl
		btnControl = new NativeButton();
		btnControl.setCaption("Control PLC");
		btnControl.setIcon(new ThemeResource("img/plc-registers-settings-icon-72x72.png"));
		btnControl.setImmediate(true);
		btnControl.setWidth("86px");
		btnControl.setHeight("86px");
		mainLayout.addComponent(btnControl, "top:300.0px;left:25.0px;");
		
		// btnConfiguration
		btnConfiguration = new NativeButton();
		btnConfiguration.setCaption("Configuraci\u00F3n");
		btnConfiguration.setIcon(new ThemeResource("img/settings-icon-72x72.png"));
		btnConfiguration.setImmediate(true);
		btnConfiguration.setWidth("86px");
		btnConfiguration.setHeight("86px");
		mainLayout.addComponent(btnConfiguration, "top:300.0px;left:136.0px;");
		
		// btnLastRecords
		btnLastRecords = new NativeButton();
		btnLastRecords.setCaption("\u00DAltimos Registros");
		btnLastRecords.setIcon(new ThemeResource("img/last-records-icon-72x72.png"));
		btnLastRecords.setImmediate(true);
		btnLastRecords.setWidth("86px");
		btnLastRecords.setHeight("86px");
		mainLayout.addComponent(btnLastRecords, "top:300.0px;left:358.0px;");
		
		// btnMemoryMap
		btnMemoryMap = new NativeButton();
		btnMemoryMap.setCaption("Mapa de memoria");
		btnMemoryMap.setIcon(new ThemeResource("img/memory-map-icon-72x72.png"));
		btnMemoryMap.setImmediate(true);
		btnMemoryMap.setWidth("86px");
		btnMemoryMap.setHeight("86px");
		mainLayout.addComponent(btnMemoryMap, "top:300.0px;left:469.0px;");

        // refresher
        refresher = new Refresher();
        refresher.setImmediate(false);
        refresher.setWidth("-1px");
        refresher.setHeight("-1px");
        mainLayout.addComponent(refresher, "top:0.0px;left:0.0px;");
		
		return mainLayout;
	}
}
