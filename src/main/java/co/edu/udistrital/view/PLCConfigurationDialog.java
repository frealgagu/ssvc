package co.edu.udistrital.view;

import co.edu.udistrital.domain.plc.DataBits;
import co.edu.udistrital.domain.plc.Encoding;
import co.edu.udistrital.domain.plc.Parity;
import co.edu.udistrital.domain.plc.StopBits;
import co.edu.udistrital.service.ApplicationServices;
import co.edu.udistrital.service.ConfigurationService;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.TextField;

public class PLCConfigurationDialog extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
    private AbsoluteLayout mainLayout;
	@AutoGenerated
    private NativeButton btnCancel;
	@AutoGenerated
    private NativeButton btnOk;
	@AutoGenerated
    private Label lblPLCConfiguration;
	@AutoGenerated
    private TextField txtTimeout;
	@AutoGenerated
    private ComboBox cmbEncoding;
	@AutoGenerated
    private ComboBox cmbStopBits;
	@AutoGenerated
    private ComboBox cmbParity;
	@AutoGenerated
    private ComboBox cmbDataBits;
	@AutoGenerated
    private TextField txtBaudRate;
	@AutoGenerated
    private TextField txtPort;
	@AutoGenerated
    private Label lblTimeout;
	@AutoGenerated
    private Label lblEncoding;
	@AutoGenerated
    private Label lblStopBits;
	@AutoGenerated
    private Label lblParity;
	@AutoGenerated
    private Label lblDataBits;
	@AutoGenerated
    private Label lblBaudRate;
	@AutoGenerated
    private Label lblPortName;
	private static final long serialVersionUID = 1567612014356481037L;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public PLCConfigurationDialog() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		initialize();
	}
	
	private void initialize() {
		for(DataBits dataBits : DataBits.values()) {
			cmbDataBits.addItem(dataBits);
		}
		for(Parity parity : Parity.values()) {
			cmbParity.addItem(parity);
		}
		for(StopBits stopBits : StopBits.values()) {
			cmbStopBits.addItem(stopBits);
		}
		for(Encoding encoding : Encoding.values()) {
			cmbEncoding.addItem(encoding);
		}
		btnOk.addListener(new Button.ClickListener() {
			
            private static final long serialVersionUID = -8577869814107324983L;

			@Override
			public void buttonClick(ClickEvent event) {
				ok();
			}
		});
		btnCancel.addListener(new Button.ClickListener() {
			
            private static final long serialVersionUID = -4972802977202955811L;

			@Override
			public void buttonClick(ClickEvent event) {
				cancel();
			}
		});
		
		ConfigurationService configurationService = ApplicationServices.getConfigurationService();
		txtPort.setValue(configurationService.getPort());
		txtBaudRate.setValue(configurationService.getBaudRate());
		cmbDataBits.setValue(configurationService.getDataBits());
		cmbParity.setValue(configurationService.getParity());
		cmbStopBits.setValue(configurationService.getStopBits());
		cmbEncoding.setValue(configurationService.getEncoding());
		txtTimeout.setValue(configurationService.getTimeout());
	}
	
	private void ok() {
		ConfigurationService configurationService = ApplicationServices.getConfigurationService();
		if(txtPort.getValue() != null) {
			configurationService.setPort(String.valueOf(txtPort.getValue()));
		} else {
			configurationService.setPort("");
		}
		if(txtBaudRate.getValue() instanceof Integer) {
			configurationService.setBaudRate((Integer)txtBaudRate.getValue());
		} else {
			try {
				configurationService.setBaudRate(Integer.parseInt(String.valueOf(txtBaudRate.getValue())));
			} catch(NumberFormatException ignore) {
				configurationService.setBaudRate(19200);
			}
		}
		if(cmbDataBits.getValue() instanceof DataBits) {
			configurationService.setDataBits((DataBits)cmbDataBits.getValue());
		} else {
			configurationService.setDataBits(DataBits.EIGHT);			
		}
		if(cmbParity.getValue() instanceof Parity) {
			configurationService.setParity((Parity)cmbParity.getValue());
		} else {
			configurationService.setParity(Parity.EVEN);
		}
		if(cmbStopBits.getValue() instanceof StopBits) {
			configurationService.setStopBits((StopBits)cmbStopBits.getValue());
		} else {
			configurationService.setStopBits(StopBits.ONE);
		}
		if(cmbEncoding.getValue() instanceof Encoding) {
			configurationService.setEncoding((Encoding)cmbEncoding.getValue());
		} else {
			configurationService.setEncoding(Encoding.RTU);
		}
		if(txtTimeout.getValue() instanceof Integer) {
			configurationService.setTimeout((Integer)txtTimeout.getValue());
		} else {
			try {
				configurationService.setTimeout(Integer.parseInt(String.valueOf(txtTimeout.getValue())));
			} catch(NumberFormatException ignore) {
				configurationService.setTimeout(0);
			}
		}
		if(getWindow() != null && getWindow().getParent() != null) {
			getWindow().getParent().removeWindow(getWindow());
		}
	}
	
	private void cancel() {
		if(getWindow() != null && getWindow().getParent() != null) {
			getWindow().getParent().removeWindow(getWindow());
		}
	}

	@AutoGenerated
    private AbsoluteLayout buildMainLayout() {
	    // common part: create layout
	    mainLayout = new AbsoluteLayout();
	    mainLayout.setImmediate(false);
	    mainLayout.setWidth("360px");
	    mainLayout.setHeight("340px");
	    
	    // top-level component properties
	    setWidth("360px");
	    setHeight("340px");
	    
	    // lblPortName
	    lblPortName = new Label();
	    lblPortName.setImmediate(false);
	    lblPortName.setWidth("160px");
	    lblPortName.setHeight("25px");
	    lblPortName.setValue("Puerto:");
	    mainLayout.addComponent(lblPortName, "top:60.0px;left:20.0px;");
	    
	    // lblBaudRate
	    lblBaudRate = new Label();
	    lblBaudRate.setImmediate(false);
	    lblBaudRate.setWidth("160px");
	    lblBaudRate.setHeight("25px");
	    lblBaudRate.setValue("Velocidad de transmisión:");
	    mainLayout.addComponent(lblBaudRate, "top:90.0px;left:20.0px;");
	    
	    // lblDataBits
	    lblDataBits = new Label();
	    lblDataBits.setImmediate(false);
	    lblDataBits.setWidth("160px");
	    lblDataBits.setHeight("25px");
	    lblDataBits.setValue("Bits de datos:");
	    mainLayout.addComponent(lblDataBits, "top:120.0px;left:20.0px;");
	    
	    // lblParity
	    lblParity = new Label();
	    lblParity.setImmediate(false);
	    lblParity.setWidth("160px");
	    lblParity.setHeight("25px");
	    lblParity.setValue("Paridad:");
	    mainLayout.addComponent(lblParity, "top:150.0px;left:20.0px;");
	    
	    // lblStopBits
	    lblStopBits = new Label();
	    lblStopBits.setImmediate(false);
	    lblStopBits.setWidth("160px");
	    lblStopBits.setHeight("25px");
	    lblStopBits.setValue("Bits de parada:");
	    mainLayout.addComponent(lblStopBits, "top:180.0px;left:20.0px;");
	    
	    // lblEncoding
	    lblEncoding = new Label();
	    lblEncoding.setImmediate(false);
	    lblEncoding.setWidth("160px");
	    lblEncoding.setHeight("25px");
	    lblEncoding.setValue("Codificación:");
	    mainLayout.addComponent(lblEncoding, "top:210.0px;left:20.0px;");
	    
	    // lblTimeout
	    lblTimeout = new Label();
	    lblTimeout.setImmediate(false);
	    lblTimeout.setWidth("160px");
	    lblTimeout.setHeight("25px");
	    lblTimeout.setValue("Tiempo de espera:");
	    mainLayout.addComponent(lblTimeout, "top:240.0px;left:20.0px;");
	    
	    // txtPort
	    txtPort = new TextField();
	    txtPort.setImmediate(false);
	    txtPort.setWidth("100.0%");
	    txtPort.setHeight("25px");
	    mainLayout.addComponent(txtPort,
	            "top:60.0px;right:20.0px;left:180.0px;");
	    
	    // txtBaudRate
	    txtBaudRate = new TextField();
	    txtBaudRate.setImmediate(false);
	    txtBaudRate.setWidth("100.0%");
	    txtBaudRate.setHeight("25px");
	    mainLayout.addComponent(txtBaudRate,
	            "top:90.0px;right:20.0px;left:180.0px;");
	    
	    // cmbDataBits
	    cmbDataBits = new ComboBox();
	    cmbDataBits.setImmediate(false);
	    cmbDataBits.setWidth("100.0%");
	    cmbDataBits.setHeight("25px");
	    mainLayout.addComponent(cmbDataBits,
	            "top:120.0px;right:20.0px;left:180.0px;");
	    
	    // cmbParity
	    cmbParity = new ComboBox();
	    cmbParity.setImmediate(false);
	    cmbParity.setWidth("100.0%");
	    cmbParity.setHeight("25px");
	    mainLayout.addComponent(cmbParity,
	            "top:150.0px;right:20.0px;left:180.0px;");
	    
	    // cmbStopBits
	    cmbStopBits = new ComboBox();
	    cmbStopBits.setImmediate(false);
	    cmbStopBits.setWidth("100.0%");
	    cmbStopBits.setHeight("25px");
	    mainLayout.addComponent(cmbStopBits,
	            "top:180.0px;right:20.0px;left:180.0px;");
	    
	    // cmbEncoding
	    cmbEncoding = new ComboBox();
	    cmbEncoding.setImmediate(false);
	    cmbEncoding.setWidth("100.0%");
	    cmbEncoding.setHeight("25px");
	    mainLayout.addComponent(cmbEncoding,
	            "top:210.0px;right:20.0px;left:180.0px;");
	    
	    // txtTimeout
	    txtTimeout = new TextField();
	    txtTimeout.setImmediate(false);
	    txtTimeout.setWidth("100.0%");
	    txtTimeout.setHeight("25px");
	    mainLayout.addComponent(txtTimeout,
	            "top:240.0px;right:20.0px;left:180.0px;");
	    
	    // lblPLCConfiguration
	    lblPLCConfiguration = new Label();
	    lblPLCConfiguration.setImmediate(false);
	    lblPLCConfiguration.setWidth("100.0%");
	    lblPLCConfiguration.setHeight("20px");
	    lblPLCConfiguration
	            .setValue("<font size=\"4\"><center><b>Configuración del PLC</b></center>");
	    lblPLCConfiguration.setContentMode(3);
	    mainLayout.addComponent(lblPLCConfiguration,
	            "top:20.0px;right:20.0px;left:20.0px;");
	    
	    // btnOk
	    btnOk = new NativeButton();
	    btnOk.setCaption("Aceptar");
	    btnOk.setImmediate(true);
	    btnOk.setWidth("120px");
	    btnOk.setHeight("38px");
	    mainLayout.addComponent(btnOk, "top:282.0px;left:40.0px;");
	    
	    // btnCancel
	    btnCancel = new NativeButton();
	    btnCancel.setCaption("Cancelar");
	    btnCancel.setImmediate(true);
	    btnCancel.setWidth("120px");
	    btnCancel.setHeight("38px");
	    mainLayout.addComponent(btnCancel, "top:282.0px;left:200.0px;");
	    
	    return mainLayout;
    }

}
