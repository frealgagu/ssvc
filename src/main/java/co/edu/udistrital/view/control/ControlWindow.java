package co.edu.udistrital.view.control;

import co.edu.udistrital.exception.PLCCommunicationException;
import co.edu.udistrital.plc.communication.PLCCommunication;
import co.edu.udistrital.service.ApplicationServices;
import co.edu.udistrital.view.InitApplication;

import com.github.wolfie.refresher.Refresher;
import com.github.wolfie.refresher.Refresher.RefreshListener;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.event.FieldEvents;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TextField;

public class ControlWindow extends CustomComponent implements RefreshListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;

    @AutoGenerated
    private Refresher refresher;

	@AutoGenerated
	private Panel pnlTemperature;

	@AutoGenerated
	private AbsoluteLayout absoluteLayout_3;

	@AutoGenerated
	private TextField txtDesiredTemperature;

	@AutoGenerated
	private Label lblDesiredTemperature;

	@AutoGenerated
	private NativeButton btnTemperatureTurnOff;

	@AutoGenerated
	private NativeButton btnTemperatureTurnOn;

	@AutoGenerated
	private Panel pnlPressure;

	@AutoGenerated
	private AbsoluteLayout absoluteLayout_2;

	@AutoGenerated
	private TextField txtDesiredPressure;

	@AutoGenerated
	private Label lblDesiredPressure;

	@AutoGenerated
	private NativeButton btnPressureTurnOff;

	@AutoGenerated
	private NativeButton btnPressureTurnOn;

	@AutoGenerated
	private NativeButton btnMemoryMap;

	@AutoGenerated
	private NativeButton btnLastRecords;

	@AutoGenerated
	private NativeButton btnCurrentStatus;

	@AutoGenerated
	private NativeButton btnConfiguration;

	private static final long serialVersionUID = -4124516563611187464L;

	private final InitApplication initApplication;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ControlWindow(InitApplication initApplication) {
		this.initApplication = initApplication;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		initialize();
	}
	
	private void initialize() {
		btnConfiguration.addListener(new Button.ClickListener() {

            private static final long serialVersionUID = 1763762022344089588L;

			@Override
			public void buttonClick(ClickEvent event) {
				initApplication.showConfigurationWindow();
			}
		});
		btnCurrentStatus.addListener(new Button.ClickListener() {

            private static final long serialVersionUID = -688571120433290392L;

			@Override
			public void buttonClick(ClickEvent event) {
				initApplication.showCurrentStatusWindow();
			}
		});
		btnLastRecords.addListener(new Button.ClickListener() {

            private static final long serialVersionUID = 5694900205721293001L;

			@Override
			public void buttonClick(ClickEvent event) {
				initApplication.showLastRecordsWindow();
			}
		});

        final int machineTurnOnOff = ApplicationServices.getConfigurationService().getMachineTurnOnOff();

		btnMemoryMap.addListener(new Button.ClickListener() {

            private static final long serialVersionUID = 1362297965791130357L;

			@Override
			public void buttonClick(ClickEvent event) {
				initApplication.showMemoryMapWindow();
			}
		});

        btnPressureTurnOn.addListener(new Button.ClickListener() {
            @Override
            public void buttonClick(ClickEvent clickEvent) {
                try {
                    ApplicationServices.getPLCService().writeCoil(machineTurnOnOff, true, PLCCommunication.DEFAULT_UNIT_ID);
                } catch (PLCCommunicationException ex) {
                    ex.printStackTrace();
                }
            }
        });
        btnPressureTurnOff.addListener(new Button.ClickListener() {
            @Override
            public void buttonClick(ClickEvent clickEvent) {
                try {
                    ApplicationServices.getPLCService().writeCoil(machineTurnOnOff, false, PLCCommunication.DEFAULT_UNIT_ID);
                } catch (PLCCommunicationException ex) {
                    ex.printStackTrace();
                }
            }
        });
        btnTemperatureTurnOn.addListener(new Button.ClickListener() {
            @Override
            public void buttonClick(ClickEvent clickEvent) {
                try {
                    ApplicationServices.getPLCService().writeCoil(machineTurnOnOff, true, PLCCommunication.DEFAULT_UNIT_ID);
                } catch (PLCCommunicationException ex) {
                    ex.printStackTrace();
                }
            }
        });
        btnTemperatureTurnOff.addListener(new Button.ClickListener() {
            @Override
            public void buttonClick(ClickEvent clickEvent) {
                try {
                    ApplicationServices.getPLCService().writeCoil(machineTurnOnOff, false, PLCCommunication.DEFAULT_UNIT_ID);
                } catch (PLCCommunicationException ex) {
                    ex.printStackTrace();
                }
            }
        });

        final int pressureWrite = ApplicationServices.getConfigurationService().getPressureWrite();
        final int temperatureWrite = ApplicationServices.getConfigurationService().getTemperatureWrite();

        try {
            txtDesiredPressure.setValue(ApplicationServices.getPLCService().readRegister(pressureWrite, PLCCommunication.DEFAULT_UNIT_ID));
            txtDesiredTemperature.setValue(ApplicationServices.getPLCService().readRegister(temperatureWrite, PLCCommunication.DEFAULT_UNIT_ID));
        } catch (PLCCommunicationException ex) {
            ex.printStackTrace();
        }

        txtDesiredPressure.addListener(new FieldEvents.TextChangeListener() {
            @Override
            public void textChange(FieldEvents.TextChangeEvent textChangeEvent) {
                try {
                    ApplicationServices.getPLCService().writeRegister(pressureWrite, Integer.parseInt(textChangeEvent.getText()), PLCCommunication.DEFAULT_UNIT_ID);
                } catch (PLCCommunicationException | NumberFormatException ex) {
                    ex.printStackTrace();
                }
            }
        });

        txtDesiredTemperature.addListener(new FieldEvents.TextChangeListener() {
            @Override
            public void textChange(FieldEvents.TextChangeEvent textChangeEvent) {
                try {
                    ApplicationServices.getPLCService().writeRegister(temperatureWrite, Integer.parseInt(textChangeEvent.getText()), PLCCommunication.DEFAULT_UNIT_ID);
                } catch (PLCCommunicationException | NumberFormatException ex) {
                    ex.printStackTrace();
                }
            }
        });

        refresher.setRefreshInterval(1000);
        refresher.addListener(this);
	}

    @Override
    public void refresh(Refresher source) {
        if(isVisible()) {
            source.attach();
            try {
                boolean pressureTurnedOn = ApplicationServices.getPLCService().readCoil(10, PLCCommunication.DEFAULT_UNIT_ID);
                btnPressureTurnOn.setEnabled(!pressureTurnedOn);
                btnPressureTurnOff.setEnabled(pressureTurnedOn);

                boolean temperatureTurnedOn = ApplicationServices.getPLCService().readCoil(10, PLCCommunication.DEFAULT_UNIT_ID);
                btnTemperatureTurnOn.setEnabled(!temperatureTurnedOn);
                btnTemperatureTurnOff.setEnabled(temperatureTurnedOn);
            } catch(PLCCommunicationException ex) {
                ex.printStackTrace();
            }
        } else {
            source.detach();
        }
    }

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("580px");
		mainLayout.setHeight("400px");
		
		// top-level component properties
		setWidth("580px");
		setHeight("400px");
		
		// btnConfiguration
		btnConfiguration = new NativeButton();
		btnConfiguration.setCaption("Configuraci\u00F3n");
		btnConfiguration.setIcon(new ThemeResource(
				"img/settings-icon-72x72.png"));
		btnConfiguration.setImmediate(true);
		btnConfiguration.setWidth("86px");
		btnConfiguration.setHeight("86px");
		mainLayout.addComponent(btnConfiguration, "top:300.0px;left:136.0px;");
		
		// btnCurrentStatus
		btnCurrentStatus = new NativeButton();
		btnCurrentStatus.setCaption("Estado actual");
		btnCurrentStatus.setIcon(new ThemeResource(
				"img/current-status-icon-72x72.png"));
		btnCurrentStatus.setImmediate(true);
		btnCurrentStatus.setWidth("86px");
		btnCurrentStatus.setHeight("86px");
		mainLayout.addComponent(btnCurrentStatus, "top:300.0px;left:247.0px;");
		
		// btnLastRecords
		btnLastRecords = new NativeButton();
		btnLastRecords.setCaption("\u00DAltimos Registros");
		btnLastRecords.setIcon(new ThemeResource(
				"img/last-records-icon-72x72.png"));
		btnLastRecords.setImmediate(true);
		btnLastRecords.setWidth("86px");
		btnLastRecords.setHeight("86px");
		mainLayout.addComponent(btnLastRecords, "top:300.0px;left:358.0px;");
		
		// btnMemoryMap
		btnMemoryMap = new NativeButton();
		btnMemoryMap.setCaption("Mapa de memoria");
		btnMemoryMap
				.setIcon(new ThemeResource("img/memory-map-icon-72x72.png"));
		btnMemoryMap.setImmediate(true);
		btnMemoryMap.setWidth("86px");
		btnMemoryMap.setHeight("86px");
		mainLayout.addComponent(btnMemoryMap, "top:300.0px;left:469.0px;");
		
		// pnlPressure
		pnlPressure = buildPnlPressure();
		mainLayout.addComponent(pnlPressure, "top:20.0px;left:20.0px;");
		
		// pnlTemperature
		pnlTemperature = buildPnlTemperature();
		mainLayout.addComponent(pnlTemperature, "top:20.0px;right:20.0px;");

        // refresher
        refresher = new Refresher();
        refresher.setImmediate(false);
        refresher.setWidth("-1px");
        refresher.setHeight("-1px");
        mainLayout.addComponent(refresher, "top:0.0px;left:0.0px;");
		
		return mainLayout;
	}

	@AutoGenerated
	private Panel buildPnlPressure() {
		// common part: create layout
		pnlPressure = new Panel();
		pnlPressure.setCaption("<center>Presi\u00F3n</center>");
		pnlPressure.setImmediate(false);
		pnlPressure.setWidth("250px");
		pnlPressure.setHeight("260px");

		// absoluteLayout_2
		absoluteLayout_2 = buildAbsoluteLayout_2();
		pnlPressure.setContent(absoluteLayout_2);
		
		return pnlPressure;
	}

	@AutoGenerated
	private AbsoluteLayout buildAbsoluteLayout_2() {
		// common part: create layout
		absoluteLayout_2 = new AbsoluteLayout();
		absoluteLayout_2.setImmediate(false);
		absoluteLayout_2.setWidth("100.0%");
		absoluteLayout_2.setHeight("100.0%");
		
		// btnPressureTurnOn
		btnPressureTurnOn = new NativeButton();
		btnPressureTurnOn.setCaption("On");
		btnPressureTurnOn.setIcon(new ThemeResource(
				"img/turn-on-icon-72x72.png"));
		btnPressureTurnOn.setImmediate(true);
		btnPressureTurnOn.setWidth("86px");
		btnPressureTurnOn.setHeight("86px");
		absoluteLayout_2.addComponent(btnPressureTurnOn,
				"top:20.0px;left:26.0px;");
		
		// btnPressureTurnOff
		btnPressureTurnOff = new NativeButton();
		btnPressureTurnOff.setCaption("Off");
		btnPressureTurnOff.setIcon(new ThemeResource(
				"img/turn-off-icon-72x72.png"));
		btnPressureTurnOff.setImmediate(true);
		btnPressureTurnOff.setWidth("86px");
		btnPressureTurnOff.setHeight("86px");
		absoluteLayout_2.addComponent(btnPressureTurnOff,
				"top:20.0px;right:25.0px;");
		
		// lblDesiredPressure
		lblDesiredPressure = new Label();
		lblDesiredPressure.setImmediate(false);
		lblDesiredPressure.setWidth("100.0%");
		lblDesiredPressure.setHeight("-1px");
		lblDesiredPressure.setValue("<center>Presi\u00F3n Deseada</center>");
		lblDesiredPressure.setContentMode(3);
		absoluteLayout_2.addComponent(lblDesiredPressure,
				"top:125.0px;right:50.0px;left:50.0px;");
		
		// txtDesiredPressure
		txtDesiredPressure = new TextField();
		txtDesiredPressure.setImmediate(false);
		txtDesiredPressure.setWidth("100.0%");
		txtDesiredPressure.setHeight("-1px");
		absoluteLayout_2.addComponent(txtDesiredPressure,
				"top:155.0px;right:90.0px;left:90.0px;");
		
		return absoluteLayout_2;
	}

	@AutoGenerated
	private Panel buildPnlTemperature() {
		// common part: create layout
		pnlTemperature = new Panel();
		pnlTemperature.setCaption("<center>Temperatura</center>");
		pnlTemperature.setImmediate(false);
		pnlTemperature.setWidth("250px");
		pnlTemperature.setHeight("260px");
		
		// absoluteLayout_3
		absoluteLayout_3 = buildAbsoluteLayout_3();
		pnlTemperature.setContent(absoluteLayout_3);
		
		return pnlTemperature;
	}

	@AutoGenerated
	private AbsoluteLayout buildAbsoluteLayout_3() {
		// common part: create layout
		absoluteLayout_3 = new AbsoluteLayout();
		absoluteLayout_3.setImmediate(false);
		absoluteLayout_3.setWidth("100.0%");
		absoluteLayout_3.setHeight("100.0%");
		
		// btnTemperatureTurnOn
		btnTemperatureTurnOn = new NativeButton();
		btnTemperatureTurnOn.setCaption("On");
		btnTemperatureTurnOn.setIcon(new ThemeResource(
				"img/turn-on-icon-72x72.png"));
		btnTemperatureTurnOn.setImmediate(true);
		btnTemperatureTurnOn.setWidth("86px");
		btnTemperatureTurnOn.setHeight("86px");
		absoluteLayout_3.addComponent(btnTemperatureTurnOn,
				"top:21.0px;left:25.0px;");
		
		// btnTemperatureTurnOff
		btnTemperatureTurnOff = new NativeButton();
		btnTemperatureTurnOff.setCaption("Off");
		btnTemperatureTurnOff.setIcon(new ThemeResource(
				"img/turn-off-icon-72x72.png"));
		btnTemperatureTurnOff.setImmediate(true);
		btnTemperatureTurnOff.setWidth("86px");
		btnTemperatureTurnOff.setHeight("86px");
		absoluteLayout_3.addComponent(btnTemperatureTurnOff,
				"top:20.0px;right:25.0px;");
		
		// lblDesiredTemperature
		lblDesiredTemperature = new Label();
		lblDesiredTemperature.setImmediate(false);
		lblDesiredTemperature.setWidth("100.0%");
		lblDesiredTemperature.setHeight("-1px");
		lblDesiredTemperature.setValue("<center>Temperatura Deseada</center>");
		lblDesiredTemperature.setContentMode(3);
		absoluteLayout_3.addComponent(lblDesiredTemperature,
				"top:125.0px;right:50.0px;left:50.0px;");
		
		// txtDesiredTemperature
		txtDesiredTemperature = new TextField();
		txtDesiredTemperature.setImmediate(false);
		txtDesiredTemperature.setWidth("100.0%");
		txtDesiredTemperature.setHeight("-1px");
		absoluteLayout_3.addComponent(txtDesiredTemperature,
				"top:155.0px;right:90.0px;left:90.0px;");
		
		return absoluteLayout_3;
	}
}
