package co.edu.udistrital.view.control;

import co.edu.udistrital.exception.PLCCommunicationException;
import co.edu.udistrital.plc.communication.PLCCommunication;
import co.edu.udistrital.service.ApplicationServices;
import co.edu.udistrital.view.InitApplication;

import com.github.wolfie.refresher.Refresher;
import com.github.wolfie.refresher.Refresher.RefreshListener;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.Panel;

public class ControlWindow extends CustomComponent implements RefreshListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;

	@AutoGenerated
	private NativeButton btnPressureTurnOff;

	@AutoGenerated
	private NativeButton btnPressureTurnOn;

	@AutoGenerated
	private Refresher refresher;

	@AutoGenerated
	private Panel pnlTemperature;

	@AutoGenerated
	private AbsoluteLayout temperatureLayout;

	@AutoGenerated
	private NativeButton btnAlarmTemperature;

	@AutoGenerated
	private NativeButton btnDesiredTemperature;

	@AutoGenerated
	private Label lblAlarmTemperature;

	@AutoGenerated
	private Label lblDesiredTemperature;

	@AutoGenerated
	private NativeButton btnCurrentTemperature;

	@AutoGenerated
	private Label lblCurrentTemperature;

	@AutoGenerated
	private Panel pnlPressure;

	@AutoGenerated
	private AbsoluteLayout pressureLayout;

	@AutoGenerated
	private NativeButton btnAlarmPressure;

	@AutoGenerated
	private NativeButton btnDesiredPressure;

	@AutoGenerated
	private Label lblAlarmPressure;

	@AutoGenerated
	private Label lblDesiredPressure;

	@AutoGenerated
	private NativeButton btnCurrentPressure;

	@AutoGenerated
	private Label lblCurrentPressure;

	@AutoGenerated
	private NativeButton btnMemoryMap;

	@AutoGenerated
	private NativeButton btnLastRecords;

	@AutoGenerated
	private NativeButton btnCurrentStatus;

	@AutoGenerated
	private NativeButton btnConfiguration;

	private static final long serialVersionUID = -4124516563611187464L;

	private final InitApplication initApplication;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ControlWindow(InitApplication initApplication) {
		this.initApplication = initApplication;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		initialize();
	}
	
	private void initialize() {
		btnConfiguration.addListener(new Button.ClickListener() {

            private static final long serialVersionUID = 1763762022344089588L;

			@Override
			public void buttonClick(ClickEvent event) {
				initApplication.showConfigurationWindow();
			}
		});
		btnCurrentStatus.addListener(new Button.ClickListener() {

            private static final long serialVersionUID = -688571120433290392L;

			@Override
			public void buttonClick(ClickEvent event) {
				initApplication.showCurrentStatusWindow();
			}
		});
		btnLastRecords.addListener(new Button.ClickListener() {

            private static final long serialVersionUID = 5694900205721293001L;

			@Override
			public void buttonClick(ClickEvent event) {
				initApplication.showLastRecordsWindow();
			}
		});

        final int machineTurnOnOff = ApplicationServices.getConfigurationService().getMachineTurnOnOff();

		btnMemoryMap.addListener(new Button.ClickListener() {

            private static final long serialVersionUID = 1362297965791130357L;

			@Override
			public void buttonClick(ClickEvent event) {
				initApplication.showMemoryMapWindow();
			}
		});

        btnPressureTurnOn.addListener(new Button.ClickListener() {
            @Override
            public void buttonClick(ClickEvent clickEvent) {
                try {
                    ApplicationServices.getPLCService().writeCoil(machineTurnOnOff, true, PLCCommunication.DEFAULT_UNIT_ID);
                } catch (PLCCommunicationException ex) {
                    ex.printStackTrace();
                }
            }
        });
        btnPressureTurnOff.addListener(new Button.ClickListener() {
            @Override
            public void buttonClick(ClickEvent clickEvent) {
                try {
                    ApplicationServices.getPLCService().writeCoil(machineTurnOnOff, false, PLCCommunication.DEFAULT_UNIT_ID);
                } catch (PLCCommunicationException ex) {
                    ex.printStackTrace();
                }
            }
        });

        final int pressureWrite = ApplicationServices.getConfigurationService().getPressureWriteRegister();
        final int temperatureWrite = ApplicationServices.getConfigurationService().getTemperatureWriteRegister();

        /*try {
            txtDesiredPressure.setValue(ApplicationServices.getPLCService().readRegister(pressureWrite, PLCCommunication.DEFAULT_UNIT_ID));
            txtDesiredTemperature.setValue(ApplicationServices.getPLCService().readRegister(temperatureWrite, PLCCommunication.DEFAULT_UNIT_ID));
        } catch (PLCCommunicationException ex) {
            ex.printStackTrace();
        }

        txtDesiredPressure.addListener(new FieldEvents.TextChangeListener() {
            @Override
            public void textChange(FieldEvents.TextChangeEvent textChangeEvent) {
                try {
                    ApplicationServices.getPLCService().writeRegister(pressureWrite, Integer.parseInt(textChangeEvent.getText()), PLCCommunication.DEFAULT_UNIT_ID);
                } catch (PLCCommunicationException | NumberFormatException ex) {
                    ex.printStackTrace();
                }
            }
        });

        txtDesiredTemperature.addListener(new FieldEvents.TextChangeListener() {
            @Override
            public void textChange(FieldEvents.TextChangeEvent textChangeEvent) {
                try {
                    ApplicationServices.getPLCService().writeRegister(temperatureWrite, Integer.parseInt(textChangeEvent.getText()), PLCCommunication.DEFAULT_UNIT_ID);
                } catch (PLCCommunicationException | NumberFormatException ex) {
                    ex.printStackTrace();
                }
            }
        });*/

        update();

        refresher.setRefreshInterval(1000);
        refresher.addListener(this);
	}

    @Override
    public void refresh(Refresher source) {
        if(isVisible()) {
            source.attach();
            update();
        } else {
            source.detach();
        }
    }

    private void update() {
        try {
            boolean pressureTurnedOn = ApplicationServices.getPLCService().readCoil(10, PLCCommunication.DEFAULT_UNIT_ID);
            btnPressureTurnOn.setEnabled(!pressureTurnedOn);
            btnPressureTurnOff.setEnabled(pressureTurnedOn);
        } catch(PLCCommunicationException ex) {
            ex.printStackTrace();
        }
    }

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("580px");
		mainLayout.setHeight("400px");
		
		// top-level component properties
		setWidth("580px");
		setHeight("400px");
		
		// btnConfiguration
		btnConfiguration = new NativeButton();
		btnConfiguration.setCaption("Configuración");
		btnConfiguration.setIcon(new ThemeResource(
				"img/settings-icon-72x72.png"));
		btnConfiguration.setImmediate(true);
		btnConfiguration.setWidth("86px");
		btnConfiguration.setHeight("86px");
		mainLayout.addComponent(btnConfiguration, "top:300.0px;left:136.0px;");
		
		// btnCurrentStatus
		btnCurrentStatus = new NativeButton();
		btnCurrentStatus.setCaption("Estado actual");
		btnCurrentStatus.setIcon(new ThemeResource(
				"img/current-status-icon-72x72.png"));
		btnCurrentStatus.setImmediate(true);
		btnCurrentStatus.setWidth("86px");
		btnCurrentStatus.setHeight("86px");
		mainLayout.addComponent(btnCurrentStatus, "top:300.0px;left:247.0px;");
		
		// btnLastRecords
		btnLastRecords = new NativeButton();
		btnLastRecords.setCaption("Últimos Registros");
		btnLastRecords.setIcon(new ThemeResource(
				"img/last-records-icon-72x72.png"));
		btnLastRecords.setImmediate(true);
		btnLastRecords.setWidth("86px");
		btnLastRecords.setHeight("86px");
		mainLayout.addComponent(btnLastRecords, "top:300.0px;left:358.0px;");
		
		// btnMemoryMap
		btnMemoryMap = new NativeButton();
		btnMemoryMap.setCaption("Mapa de memoria");
		btnMemoryMap
				.setIcon(new ThemeResource("img/memory-map-icon-72x72.png"));
		btnMemoryMap.setImmediate(true);
		btnMemoryMap.setWidth("86px");
		btnMemoryMap.setHeight("86px");
		mainLayout.addComponent(btnMemoryMap, "top:300.0px;left:469.0px;");
		
		// pnlPressure
		pnlPressure = buildPnlPressure();
		mainLayout.addComponent(pnlPressure, "top:20.0px;left:110.0px;");
		
		// pnlTemperature
		pnlTemperature = buildPnlTemperature();
		mainLayout.addComponent(pnlTemperature, "top:20.0px;right:20.0px;");
		
		// refresher
		refresher = new Refresher();
		refresher.setImmediate(false);
		refresher.setWidth("-1px");
		refresher.setHeight("-1px");
		mainLayout.addComponent(refresher, "top:0.0px;left:0.0px;");
		
		// btnPressureTurnOn
		btnPressureTurnOn = new NativeButton();
		btnPressureTurnOn.setCaption("On");
		btnPressureTurnOn.setIcon(new ThemeResource(
				"img/turn-on-icon-72x72.png"));
		btnPressureTurnOn.setImmediate(true);
		btnPressureTurnOn.setWidth("86px");
		btnPressureTurnOn.setHeight("86px");
		mainLayout.addComponent(btnPressureTurnOn, "top:60.0px;left:20.0px;");
		
		// btnPressureTurnOff
		btnPressureTurnOff = new NativeButton();
		btnPressureTurnOff.setCaption("Off");
		btnPressureTurnOff.setIcon(new ThemeResource(
				"img/turn-off-icon-72x72.png"));
		btnPressureTurnOff.setImmediate(true);
		btnPressureTurnOff.setWidth("86px");
		btnPressureTurnOff.setHeight("86px");
		mainLayout.addComponent(btnPressureTurnOff, "top:180.0px;left:20.0px;");
		
		return mainLayout;
	}

	@AutoGenerated
	private Panel buildPnlPressure() {
		// common part: create layout
		pnlPressure = new Panel();
		pnlPressure
				.setCaption("<center><font size=\"3\">Presión</font></center>");
		pnlPressure.setImmediate(false);
		pnlPressure.setWidth("220px");
		pnlPressure.setHeight("260px");
		
		// pressureLayout
		pressureLayout = buildPressureLayout();
		pnlPressure.setContent(pressureLayout);
		
		return pnlPressure;
	}

	@AutoGenerated
	private AbsoluteLayout buildPressureLayout() {
		// common part: create layout
		pressureLayout = new AbsoluteLayout();
		pressureLayout.setImmediate(false);
		pressureLayout.setWidth("100.0%");
		pressureLayout.setHeight("100.0%");
		
		// lblCurrentPressure
		lblCurrentPressure = new Label();
		lblCurrentPressure.setImmediate(false);
		lblCurrentPressure.setWidth("100.0%");
		lblCurrentPressure.setHeight("-1px");
		lblCurrentPressure.setValue("<center><strong>Actual</strong></center>");
		lblCurrentPressure.setContentMode(3);
		pressureLayout.addComponent(lblCurrentPressure,
				"top:15.0px;right:0.0px;left:0.0px;");
		
		// btnCurrentPressure
		btnCurrentPressure = new NativeButton();
		btnCurrentPressure.setCaption("<strong>Actual</strong>");
		btnCurrentPressure.setImmediate(true);
		btnCurrentPressure.setWidth("100.0%");
		btnCurrentPressure.setHeight("40px");
		pressureLayout.addComponent(btnCurrentPressure,
				"top:40.0px;right:50.0px;left:50.0px;");
		
		// lblDesiredPressure
		lblDesiredPressure = new Label();
		lblDesiredPressure.setImmediate(false);
		lblDesiredPressure.setWidth("100.0%");
		lblDesiredPressure.setHeight("-1px");
		lblDesiredPressure
				.setValue("<center><strong>Deseada</strong></center>");
		lblDesiredPressure.setContentMode(3);
		pressureLayout.addComponent(lblDesiredPressure,
				"top:120.0px;right:120.0px;left:10.0px;");
		
		// lblAlarmPressure
		lblAlarmPressure = new Label();
		lblAlarmPressure.setImmediate(false);
		lblAlarmPressure.setWidth("100.0%");
		lblAlarmPressure.setHeight("-1px");
		lblAlarmPressure.setValue("<center><strong>Alarma</strong></center>");
		lblAlarmPressure.setContentMode(3);
		pressureLayout.addComponent(lblAlarmPressure,
				"top:120.0px;right:10.0px;left:120.0px;");
		
		// btnDesiredPressure
		btnDesiredPressure = new NativeButton();
		btnDesiredPressure.setCaption("Deseada");
		btnDesiredPressure.setImmediate(true);
		btnDesiredPressure.setWidth("100.0%");
		btnDesiredPressure.setHeight("40px");
		pressureLayout.addComponent(btnDesiredPressure,
				"top:160.0px;right:130.0px;left:20.0px;");
		
		// btnAlarmPressure
		btnAlarmPressure = new NativeButton();
		btnAlarmPressure.setCaption("Alarma");
		btnAlarmPressure.setImmediate(true);
		btnAlarmPressure.setWidth("100.0%");
		btnAlarmPressure.setHeight("40px");
		pressureLayout.addComponent(btnAlarmPressure,
				"top:160.0px;right:20.0px;left:130.0px;");
		
		return pressureLayout;
	}

	@AutoGenerated
	private Panel buildPnlTemperature() {
		// common part: create layout
		pnlTemperature = new Panel();
		pnlTemperature
				.setCaption("<center><font size=\"3\">Temperatura</font></center>");
		pnlTemperature.setImmediate(false);
		pnlTemperature.setWidth("220px");
		pnlTemperature.setHeight("260px");
		
		// temperatureLayout
		temperatureLayout = buildTemperatureLayout();
		pnlTemperature.setContent(temperatureLayout);
		
		return pnlTemperature;
	}

	@AutoGenerated
	private AbsoluteLayout buildTemperatureLayout() {
		// common part: create layout
		temperatureLayout = new AbsoluteLayout();
		temperatureLayout.setImmediate(false);
		temperatureLayout.setWidth("100.0%");
		temperatureLayout.setHeight("100.0%");
		
		// lblCurrentTemperature
		lblCurrentTemperature = new Label();
		lblCurrentTemperature.setImmediate(false);
		lblCurrentTemperature.setWidth("100.0%");
		lblCurrentTemperature.setHeight("-1px");
		lblCurrentTemperature
				.setValue("<center><strong>Actual</strong></center>");
		lblCurrentTemperature.setContentMode(3);
		temperatureLayout.addComponent(lblCurrentTemperature,
				"top:15.0px;right:0.0px;left:0.0px;");
		
		// btnCurrentTemperature
		btnCurrentTemperature = new NativeButton();
		btnCurrentTemperature.setCaption("<strong>Actual</strong>");
		btnCurrentTemperature.setImmediate(true);
		btnCurrentTemperature.setWidth("100.0%");
		btnCurrentTemperature.setHeight("40px");
		temperatureLayout.addComponent(btnCurrentTemperature,
				"top:40.0px;right:50.0px;left:50.0px;");
		
		// lblDesiredTemperature
		lblDesiredTemperature = new Label();
		lblDesiredTemperature.setImmediate(false);
		lblDesiredTemperature.setWidth("100.0%");
		lblDesiredTemperature.setHeight("-1px");
		lblDesiredTemperature
				.setValue("<center><strong>Deseada</strong></center>");
		lblDesiredTemperature.setContentMode(3);
		temperatureLayout.addComponent(lblDesiredTemperature,
				"top:120.0px;right:120.0px;left:10.0px;");
		
		// lblAlarmTemperature
		lblAlarmTemperature = new Label();
		lblAlarmTemperature.setImmediate(false);
		lblAlarmTemperature.setWidth("100.0%");
		lblAlarmTemperature.setHeight("-1px");
		lblAlarmTemperature
				.setValue("<center><strong>Alarma</strong></center>");
		lblAlarmTemperature.setContentMode(3);
		temperatureLayout.addComponent(lblAlarmTemperature,
				"top:120.0px;right:10.0px;left:120.0px;");
		
		// btnDesiredTemperature
		btnDesiredTemperature = new NativeButton();
		btnDesiredTemperature.setCaption("Deseada");
		btnDesiredTemperature.setImmediate(true);
		btnDesiredTemperature.setWidth("100.0%");
		btnDesiredTemperature.setHeight("40px");
		temperatureLayout.addComponent(btnDesiredTemperature,
				"top:160.0px;right:130.0px;left:20.0px;");
		
		// btnAlarmTemperature
		btnAlarmTemperature = new NativeButton();
		btnAlarmTemperature.setCaption("Alarma");
		btnAlarmTemperature.setImmediate(true);
		btnAlarmTemperature.setWidth("100.0%");
		btnAlarmTemperature.setHeight("40px");
		temperatureLayout.addComponent(btnAlarmTemperature,
				"top:160.0px;right:20.0px;left:130.0px;");
		
		return temperatureLayout;
	}
}
